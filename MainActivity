package edu.ece671.mapexample;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Set;

import org.altbeacon.beacon.Beacon;
import org.altbeacon.beacon.BeaconConsumer;
import org.altbeacon.beacon.BeaconManager;
import org.altbeacon.beacon.BeaconParser;
import org.altbeacon.beacon.RangeNotifier;
import org.altbeacon.beacon.Region;

//import com.example.radbeacontestingapp.BeaconAdapter;
//import com.example.radbeacontestingapp.R;
import com.google.android.gms.maps.CameraUpdate;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnMapClickListener;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.TileOverlayOptions;
import com.google.android.gms.maps.model.UrlTileProvider;
import com.google.common.collect.ImmutableSet;

import android.net.Uri;
import android.os.Bundle;
import android.os.RemoteException;
import android.app.ActionBar;
import android.app.Activity;
import android.app.Fragment;
import android.app.FragmentTransaction;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.speech.tts.TextToSpeech;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.animation.Animation;
import android.view.animation.RotateAnimation;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.PopupMenu;
import android.widget.TextView;
import android.app.ActionBar.Tab;

public class MainActivity extends Activity implements IOnLandmarkSelectedListener, BeaconConsumer, SensorEventListener{
	
	public static int landmarknum;
	String direction = "";
	int targetID = -1;
	TextToSpeech tts;
	public static int time = 5;
	HashMap<String, Integer> roomToId = new HashMap<String, Integer>();
	private GoogleMap mMap;
	String mUrl = "http://percept.ecs.umass.edu/course/marcusbasement/{z}/{x}/{y}.png";
	
	// define the display assembly compass picture
	private ImageView image;
	float degree;
	// record the compass picture angle turned
	private float currentDegree = 0f;

	// device sensor manager
	private SensorManager mSensorManager;
	
	
	int countForAverage = 0;
	int[] rssiAV = new int[17];
	
	double marcusLat = 42.393985;
	double marcusLng = -72.528622;
	int knowlesZoom = 25;
	
	
	public int currentMode;
	Marker location;

	public final String ACTION_VIEW_MAP = "Overview Map";
	public final String ACTION_ADD_LANDMARKS = "Add Landmarks";
	public final String ACTION_REMOVE_LANDMARKS = "Remove Landmarks";

	public final int MODE_VIEW = 0;
	public final int MODE_ADD_LANDMARK = 1;
	public final int MODE_GENERATE_PATH = 2;
	public final int MODE_REMOVE_LANDMARK = 3;
	public final int MODE_SELECT_PATH = 4;
	
	CalculationReceiver calculationReceiver;

	
	public String title = "Title ";
	public int titleNumber = 0;
	private IOnLandmarkSelectedListener landmarkListener;
	public Uri imageUri;
	private Landmarks landmarks;	
	private Activity activity;
	
	private final Set<String> validGimbalIdentifiers = ImmutableSet.of(
			"00100001", "10011101");

	/** Log for TagSearchingActivity. */
	private static final String TAG_SEARCHING_ACTIVITY_LOG = "TAG_SEA_ACT_LOG";

	//private ArrayAdapter<Beacon> tagSearchListAdapter;
	private List<Beacon> discoveredBeaconList;

	/** The map used for storing discovered beacons */
	protected HashMap<String, Beacon> discoveredBeaconMap;

	/** Declare and initiate the a BeaconManager object.*/
	private BeaconManager beaconManager = BeaconManager
			.getInstanceForApplication(this);
	
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);		
		
		for(int i = 0; i < 17; i++) {
			rssiAV[i] = -80;
		}
		mapRoom();
		Log.d("We are in Oncreat","Nothing to say");
		// our compass image
		image = (ImageView) findViewById(R.id.imageViewCompass);

		// initialize your android device sensor capabilities
		mSensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
		discoveredBeaconMap = new HashMap<String, Beacon>();
		discoveredBeaconList = new ArrayList<Beacon>();
		IntentFilter answerFilter;
	    answerFilter = new IntentFilter("broadCastAnswer");
	    calculationReceiver = new CalculationReceiver();
	    registerReceiver(calculationReceiver, answerFilter);
	    tts = new TextToSpeech(MainActivity.this, new TextToSpeech.OnInitListener() {
			
			@Override
			public void onInit(int status) {
				// TODO Auto-generated method stub
				if(status != TextToSpeech.ERROR) {
					tts.setLanguage(Locale.US);
				}
			}
		});
	    getActionBar().hide();
	    
		try {
            landmarkListener = (IOnLandmarkSelectedListener) this;
        } catch (ClassCastException e) {
            throw new ClassCastException(activity.toString() + " must implement OnArticleSelectedListener");
        }

		setupMap();
	}
	
	
	
	@Override
	protected void onResume() {
		super.onResume();
		beaconManager
				.getBeaconParsers()
				.add(new BeaconParser()
						.setBeaconLayout("m:2-3=0215,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25"));
		beaconManager.bind(this);
		// for the system's orientation sensor registered listeners
		mSensorManager.registerListener(this, mSensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION),
				SensorManager.SENSOR_DELAY_GAME);
	}

	@Override
	protected void onPause() {
		super.onPause();
		beaconManager.unbind(this);
		if(tts != null) {
			tts.stop();
			tts.shutdown();
		}
		// to stop the listener and save battery
		mSensorManager.unregisterListener(this);
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
	}

	/**
	 * Refresh the list of beacon according to current values in the map and
	 * then notify the list UI to change.
	 */
	private void updateDiscoveredList() {
		discoveredBeaconList.clear();
		Iterator<Beacon> bIter = discoveredBeaconMap.values().iterator();
		while (bIter.hasNext()) {
			discoveredBeaconList.add(bIter.next());
		}
	}

	private void InitializeMarker(){
		String marcusBeacons = "" +
		"@Dis001,42.39354668258381,-72.52833187580109," +
		"@Dis002,42.39359447166392,-72.52839054912329," +
		"@Dis003,42.393661574404135,-72.52840027213097," +
		"@Dis004,42.39370936339676,-72.52845861017704," +
		"@Dis005,42.39377498034809,-72.52846665680408," +
		"@Dis006,42.39382895952455,-72.52852533012629," +
		"@Dis007,42.39389135741379,-72.52853605896235," +
		"@Dis008,42.393932460751394,-72.52859741449356," +
		"@Dis009,42.393999315520105,-72.52860512584448," +
		"@Dis010,42.39404537098601,-72.52866346389055," +
		"@Dis011,42.394103806904866,-72.52867016941309," +
		"@Dis012,42.39417412802318,-72.52873621881008," +
		"@Dis013,42.39423256382214,-72.52873655408621," +
		"@Dis014,42.39422736402869,-72.52877611666918," +
		"@Dis015,42.39416001428392,-72.52882674336433," +
		"@Dis016,42.39402060998703,-72.52868391573429," +
		"@Dis017,42.39397727821532,-72.52871174365282,";

		String[] marcusBeaconsArray = marcusBeacons.split("@");
		for(String marcusBeacon : marcusBeaconsArray){
			
			if(marcusBeacon.equals("")){
				continue;
			}
			int titleIndex = 0;
			int latitudeIndex = 1;
			int longitutdeIndex = 2;
			
			String[] beaconComponents = marcusBeacon.split(",");
			String beaconTitle = beaconComponents[titleIndex];
			double beaconLat = Double.parseDouble(beaconComponents[latitudeIndex]);
			double beaconLong = Double.parseDouble(beaconComponents[longitutdeIndex]);
			
			LatLng position = new LatLng(beaconLat,beaconLong);
			Marker marker = mMap.addMarker(new MarkerOptions().position(position).title(beaconTitle).draggable(true));
			landmarks.addMarker(beaconTitle, marker);
		}
		LatLng position = new LatLng(42.39354668258381, -72.52833187580109);
		location = mMap.addMarker(new MarkerOptions().position(position).title("Position").draggable(true).icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_ORANGE)));
		landmarks.addMarker("Position", location);
	}
	
	
	
	private void setupMap(){
		mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
		
		changeMapPositionAndZoom(new LatLng(marcusLat,marcusLng), knowlesZoom);
		MyUrlTileProvider mTileProvider = new MyUrlTileProvider(256, 256, mUrl);
		mMap.addTileOverlay(new TileOverlayOptions().tileProvider(mTileProvider).zIndex(0));
	    // display all the landmarks
		 landmarks = new Landmarks();
		 InitializeMarker();
	}

	@Override
	public boolean onOptionsItemSelected (MenuItem item){
		return true;
	}
	
	public class MyUrlTileProvider extends UrlTileProvider {

		private String baseUrl;

		public MyUrlTileProvider(int width, int height, String url) {
		    super(width, height);
		    this.baseUrl = url;
		}

		@Override
		public URL getTileUrl(int x, int y, int zoom) {
		    try {
		        return new URL(baseUrl.replace("{z}", ""+zoom).replace("{x}",""+x).replace("{y}",""+y));
		    } catch (MalformedURLException e) {
		        e.printStackTrace();
		    }
		    return null;
		}
	}
	
	private void changeMapPositionAndZoom(LatLng moveToPosition, int zoomLevel){
		changeMapPosition(moveToPosition);
		changeMapZoom(zoomLevel);
	}
	
	private void changeMapPosition(LatLng moveToPosition){
		CameraUpdate center = CameraUpdateFactory.newLatLng(moveToPosition);
		mMap.moveCamera(center);
	}
	
	private void changeMapZoom(int zoomLevel){
		CameraUpdate zoom=CameraUpdateFactory.zoomTo(zoomLevel);
		mMap.animateCamera(zoom);
	}

	@Override
	public void onLandmarkSelected(Marker landmark) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onModeChange() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onBeaconServiceConnect() {
		// TODO Auto-generated method stub
		Log.d("We are before beaconManager","Before");
		beaconManager.setRangeNotifier(new RangeNotifier() {
			@Override
			public void didRangeBeaconsInRegion(Collection<Beacon> beacons,
					Region region) {
				if (beacons.size() > 0) {
					Log.i(TAG_SEARCHING_ACTIVITY_LOG, "Found " + beacons.size()
							+ "beacons");
					for (Iterator<Beacon> bIterator = beacons.iterator(); bIterator
							.hasNext();) {
						final Beacon beacon = bIterator.next();
						if (isGimbalTag(beacon)) {
							// generate the HashMap key, which is the
							// combination of tag's UUID, Major and Minor; But
							// you can always choose your own key
							final String key = new StringBuilder()
									.append(beacon.getId1())
									.append(beacon.getId2())
									.append(beacon.getId3()).toString();
							discoveredBeaconMap.put(key, beacon);
						}
					}
					updateDiscoveredList();
					
				}
				Intent intent = new Intent(getApplicationContext(), CalculationService.class);
				Bundle myBeaconBundle = new Bundle();

				for(int i = 0; i < discoveredBeaconList.size(); i++) {
					int rssi = discoveredBeaconList.get(i).getRssi();
					if(discoveredBeaconList.get(i).getId1().toString().equals("00100001-0110-0000-1100-011111100100")){
						rssiAV[i]=(rssiAV[i]+rssi)/2;
						myBeaconBundle.putInt(discoveredBeaconList.get(i).getId3().toString(), rssiAV[i]);
						Log.d("Id of Beacon", discoveredBeaconList.get(i).getId3().toString());
					}
					
				}
				Log.d("TargetID:", "" + targetID);
				myBeaconBundle.putInt("100", targetID);
				myBeaconBundle.putFloat("1000", degree);
				intent.putExtras(myBeaconBundle);
				if(targetID != -1) {
					startService(intent);
				}
				Log.d("We sent to the service","123");
			}
		});
		
		try {
			beaconManager.startRangingBeaconsInRegion(new Region(
					"myRangingUniqueId", null, null, null));
		} catch (RemoteException e) {
		}	
		
	}
	private boolean isGimbalTag(Beacon beacon) {
		final String uuid = beacon.getId1().toString();
		final String tagIdentifier = uuid.split("-")[0];
		if (validGimbalIdentifiers.contains(tagIdentifier)) {
			return true;
		}
		return false;
	}
  
	public class CalculationReceiver extends BroadcastReceiver {

		@Override
		public void onReceive(Context context, Intent intent) {
			// TODO Auto-generated method stub
			Bundle bundle =  intent.getExtras();
			double lat = bundle.getDouble("lat");
			double lon = bundle.getDouble("lon");
			direction = bundle.getString("direction");
			Log.d("Received Number",lat + " " + lon);
			LatLng Place = new LatLng(lat,lon);			
			location.setPosition(Place);
			targetID = bundle.getInt("target");
			if(targetID!=-1){
				Log.d("ResultDirection", direction);
				Log.d("TagNumber", ""+ targetID);
				if(time>3){
					tts.speak(direction, TextToSpeech.QUEUE_FLUSH, null);
					if(direction.equals("you arrived")){
						targetID = -1;
					}
					time = 0;
				}else{
					time++;
				}
			}
//					mMap.addMarker(new MarkerOptions().position(Place).title("Place").draggable(true));
//			landmarks.addMarker("Place", marker);
		}
    	
    }

	public void onPopupBtClick(View view) {
		Log.d("lalalalalalalalala","lalalallalalalalalalalala");
		PopupMenu menu = new PopupMenu(this, view);
		menu.getMenuInflater().inflate(R.menu.targets, menu.getMenu());
		menu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){

			@Override
			public boolean onMenuItemClick(MenuItem item) {
				// TODO Auto-generated method stub
				targetID = roomToId.get(item.getTitle().toString());
				return true;
			}
			
		});
		menu.show();
	}
	
	public void mapRoom() {
		roomToId.put("Room 15B", 0);
		roomToId.put("Room 14A or 15A", 1);
		roomToId.put("Room 13", 2);
		roomToId.put("Room 12", 3);
		roomToId.put("Room 10", 4);
		roomToId.put("Room 13A", 5);
		roomToId.put("Room 8", 6);
		roomToId.put("Room 6", 7);
		roomToId.put("Stairs", 9);
		roomToId.put("CSL", 10);
		roomToId.put("Room 2", 11);
		roomToId.put("M5", 12);
		roomToId.put("Restroom", 13);
		roomToId.put("Exit1", 14);
		roomToId.put("Room 4", 15);
		roomToId.put("Exit2", 16);
		
	}



	@Override
	public void onSensorChanged(SensorEvent event) {
		// TODO Auto-generated method stub
		// get the angle around the z-axis rotated
		degree = Math.round(event.values[0]);

		//tvHeading.setText("Heading: " + Float.toString(degree) + " degrees");

		// create a rotation animation (reverse turn degree degrees)
		RotateAnimation ra = new RotateAnimation(
				currentDegree, 
				-degree,
				Animation.RELATIVE_TO_SELF, 0.5f, 
				Animation.RELATIVE_TO_SELF,
				0.5f);

		// how long the animation will take place
		ra.setDuration(210);

		// set the animation after the end of the reservation status
		ra.setFillAfter(true);

		// Start the animation
		image.startAnimation(ra);
		currentDegree = -degree;
		
	}



	@Override
	public void onAccuracyChanged(Sensor sensor, int accuracy) {
		// TODO Auto-generated method stub
		
	}
	
}
