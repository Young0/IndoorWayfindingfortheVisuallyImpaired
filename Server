package edu.ece671.mapexample;

import java.util.ArrayList;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.IBinder;
import android.util.Log;
import android.widget.Toast;

public class CalculationService extends Service{
	double corner14lat;
	double corner14lon;
	double corner23lat;
	double corner23lon;
	String direction= "";
	int startArea;
	int desArea;
	int desSpot;
	double desSpotLat;
	double desSpotLon;
	double[][] nodes = new double[17][2];
	double lat,lon;
	double straightDis;
	@Override
	public IBinder onBind(Intent intent) {
		// TODO Auto-generated method stub
		return null;
	}
	
	
	
	@Override
	public int onStartCommand(Intent intent, int flags, int startID) {
		nodes[0][0]= 42.39354668258381;
		nodes[0][1]= -72.52833187580109;

		nodes[1][0]= 42.39359447166392;
		nodes[1][1]=-72.52839054912329;

		nodes[2][0]=42.393661574404135;
		nodes[2][1]=-72.52840027213097;

		nodes[3][0]=42.39370936339676;
		nodes[3][1]=-72.52845861017704;

		nodes[4][0]=42.39377498034809;
		nodes[4][1]=-72.52846665680408;

		nodes[5][0]=42.39382895952455;
		nodes[5][1]=-72.52852533012629;

		nodes[6][0]=42.39389135741379;
		nodes[6][1]=-72.52853605896235;

		nodes[7][0]=42.393932460751394;
		nodes[7][1]=-72.52859741449356;

		nodes[8][0]=42.393999315520105;
		nodes[8][1]=-72.52860512584448;

		nodes[9][0]=42.39404537098601;
		nodes[9][1]=-72.52866346389055;

		nodes[10][0]=42.394103806904866;
		nodes[10][1]=-72.52867016941309;

		nodes[11][0]=42.39417412802318;
		nodes[11][1]=-72.52873621881008;

		nodes[12][0]=42.39423256382214;
		nodes[12][1]=-72.52873655408621;

		nodes[13][0]=42.39422736402869;
		nodes[13][1]=-72.52877611666918;

		nodes[14][0]=42.39416001428392;
		nodes[14][1]=-72.52882674336433;

		nodes[15][0]=42.39402060998703;
		nodes[15][1]=-72.52868391573429;

		nodes[16][0]=42.39397727821532;
		nodes[16][1]=-72.52871174365282;
		
		corner23lat = (nodes[12][0]+nodes[13][0])/2;
		corner23lon = (nodes[12][1]+nodes[13][1])/2;
		corner14lat = (nodes[8][0]+nodes[9][0]+nodes[9][0])/3;
		corner14lon = (nodes[8][1]+nodes[9][1]+nodes[9][1])/3;

		Bundle myBundle = intent.getExtras();
		int[] data = new int[17];
		for(int i = 0; i < 17; i++) {
			data[i] = -1000;
		}
		for(String s : myBundle.keySet()) {
			int id = Integer.parseInt(s);
			if(id <= 17) {
				data[id-1] = myBundle.getInt(s);
				Log.d("Id: " + id, "Rssi: " + myBundle.getInt(s));
			}
		}
		desSpot = myBundle.getInt("100");
		Log.d("3333333333", desSpot+"");
		findLoc(data);
		/*
		findPoints find = new findPoints();
		ArrayList<position> tagList = find.findMap(data);
		ArrayList<position> newlist = find.findTags(tagList,25.0);
		line[] lines = find.findLine(newlist);
		position positionXY = find.findPosition(lines);
		
		if(positionXY != null) {
			position positionLatAndLon = find.findLatAndLon(positionXY);
			lat = positionLatAndLon.x;
			lon = positionLatAndLon.y;
			Log.d("ResultPosition:", lat + " " + lon);
			Thread thread = new Thread(null, calculationAnswer, "calculationAnswerThread");
			thread.start();
		}
		*/
		return Service.START_NOT_STICKY;

	}

	private Runnable calculationAnswer = new Runnable(){

		@Override
		public void run() {
			// TODO Auto-generated method stub
			Intent intent = new Intent("broadCastAnswer");
			intent.putExtra("lat", lat);
			intent.putExtra("lon", lon);
			intent.putExtra("direction", direction);
			intent.putExtra("target", desSpot);
			Log.d("We are boradcasting",lat + " " + lon);
			sendBroadcast(intent);
		}
		
	};

	public void findLoc(int[] a){
		Log.d("1212121212121212", desSpot+"");
		int spot=0;
		double val=a[0];
		for(int i=0;i<17;i++){
			if(a[i]>val){
				val=a[i];
				spot=i;
			}
		}

		if(spot<14&&spot!=0){
			double spotLat=nodes[spot][0];
			double spotLon=nodes[spot][1];
			double spotUpLat=nodes[spot+1][0];
			double spotUpLon=nodes[spot+1][1];
			double spotDownLat=nodes[spot-1][0];
			double spotDownLon=nodes[spot-1][1];
			int u=1;
			int d=1;
			double latAvg=(a[spot+1]+a[spot-1])/2;
			
			if(a[spot]<-60){
				if(a[spot+1]>a[spot-1]){
					u=5;
				}else{
					d=5;
				}
			}
			lat=((-1)*a[spot+1]*d*spotDownLat+(-1)*a[spot-1]*u*spotUpLat)/((-1*(a[spot+1]*d+a[spot-1]*u)));
			lat=((-1)*lat*a[spot]+(-1)*spotLat*latAvg)/((-1)*(a[spot]+latAvg));
			lon=((-1)*a[spot+1]*d*spotDownLon+(-1)*a[spot-1]*u*spotUpLon)/((-1*(a[spot+1]*d+a[spot-1]*u)));
			lon=((-1)*lon*a[spot]+(-1)*spotLon*latAvg)/((-1)*(a[spot]+latAvg));
		}else if(spot == 14){
			double spotLat=nodes[spot][0];
			double spotLon=nodes[spot][1];

			if(a[13]<-75){
				lat = spotLat;
				lon = spotLon;
			}else{
				lat = (nodes[spot][0]+nodes[spot-1][0])/2;
				lon = (nodes[spot][1]+nodes[spot-1][1])/2;
			}
		}else if(spot == 0){
			double spotLat=nodes[spot][0];
			double spotLon=nodes[spot][1];
				if(a[1]<-75){
					lat = spotLat;
					lon = spotLon;
				}else{
					lat = (nodes[spot][0]+nodes[spot+1][0])/2;
					lon = (nodes[spot][1]+nodes[spot+1][1])/2;
				}
		}else if(spot == 16){
			double spotLat=nodes[spot][0];
			double spotLon=nodes[spot][1];

			if(a[15]<-75){
				lat = spotLat;
				lon = spotLon;
			}else{
				lat = (nodes[spot][0]+nodes[spot-1][0])/2;
				lon = (nodes[spot][1]+nodes[spot-1][1])/2;
			}
		}else if(spot == 15){
			double spotLat=nodes[spot][0];
			double spotLon=nodes[spot][1];
			double spotUpLat=nodes[16][0];
			double spotUpLon=nodes[16][1];
			double spotDownLat=nodes[9][0];
			double spotDownLon=nodes[9][1];
			double latAvg=(a[16]+a[9])/2;

			lat=((-1)*a[16]*spotDownLat+(-1)*a[9]*spotUpLat)/((-1*(a[16]+a[9])));
			lat=((-1)*lat*a[spot]+(-1)*spotLat*latAvg)/((-1)*(a[spot]+latAvg));
			lon=((-1)*a[16]*spotDownLon+(-1)*a[9]*spotUpLon)/((-1*(a[16]+a[9])));
			lon=((-1)*lon*a[spot]+(-1)*spotLon*latAvg)/((-1)*(a[spot]+latAvg));
		}

		Log.d("101010101010", desSpot+"");
		if(desSpot!=-1){
			Log.d("777777", desSpot+"");
			if( 0 <= spot && spot <= 8 ){
				startArea = 1;
			}else if( 9 <= spot && spot <= 12 ){
				startArea = 2;
			}else if( spot == 14 ){
				startArea = 3;
			}else if( spot == 16 ){
				startArea = 4;
			}else if( spot == 13 ){
				if(a[12]>a[14]){
					startArea = 2;
				}else{
					startArea = 3;
				}
			}else if( spot == 15 ){
				if(a[9]>a[16]){
					startArea = 1;
				}else{
					startArea = 4;
				}
			}
			
			if( 0 <= desSpot && desSpot <= 8 ){
				desArea = 1;
			}else if( 9 <= desSpot && desSpot <= 12 ){
				desArea = 2;
			}else if( desSpot == 14 ){
				desArea = 3;
			}else if( desSpot == 16 ){
				desArea = 4;
			}else if( desSpot == 13 ){
				if(a[12]>a[14]){
					desArea = 2;
				}else{
					desArea = 3;
				}
			}else if( desSpot == 15 ){
				if(a[9]>a[16]){
					desArea = 1;
				}else{
					desArea = 4;
				}
			}

			Log.d("8888888", desArea+" "+startArea);
			if(startArea == 1){
				if(desArea == 1){
					if(desSpot==7){
						straightDis = Distance(lon,lat, (nodes[7][1]+nodes[8][1])/2, (nodes[7][0]+nodes[8][0])/2);
					}else{
						straightDis = Distance(lon,lat, nodes[desSpot][1], nodes[desSpot][0]);
					}
					if(desSpot == spot && desSpot!=7){
						straightDis = getDistance(a[spot]);
					}
					if(desSpot == 7 && straightDis <= 2){
						direction = "you arrived";
					}else if(straightDis <= 2){
						direction = "you arrived";
					}else if(spot > desSpot){
						direction = "go straight "+ ((double)(int)(straightDis*10))/10 + "meters southeastwardly";
					}else if(spot < desSpot){
						direction = "go straight "+ ((double)(int)(straightDis*10))/10 + "meters northwestwardly";
					}else{
						direction = "keep going 1 meter.";
					}
				}else if(desArea == 2){
					straightDis = Distance(lon,lat, nodes[desSpot][1], nodes[desSpot][0]);
					direction = "go straight " + ((double)(int)(straightDis*10))/10 + "meters northwestwardly" ;
				}else if(desArea == 3){
					straightDis = Distance(lon, lat, corner14lon, corner14lat);  
					direction = "go straight "+ ((double)(int)(straightDis*10))/10 + "meters northwestwardly, then turn left";
				}else if(desArea == 4){
					straightDis = Distance(lon, lat, corner14lon, corner14lat); 
					if(straightDis <= 1){  
						direction = "go straight southwestwardly";
					}else{
						direction = "go straight "+ ((double)(int)(straightDis*10))/10 +"meters northwestwardly, then turn left.";
					}
				}
			}
	
			if(startArea == 2){
				if(desArea == 1){
					straightDis = Distance( lon, lat, nodes[desSpot][1], nodes[desSpot][0]);
					direction = "go straight "+((double)(int)(straightDis*10))/10+"meters southeastwardly" ;
				}else if(desArea == 2){
					straightDis = Distance( lon, lat, nodes[desSpot][1], nodes[desSpot][0]);
					if(desSpot == spot && desSpot!=7){
						straightDis = getDistance(a[spot]);
					}
					if(straightDis <= 2){
						direction = "you arrived";
					}else if(spot > desSpot){
						direction = "go straight "+((double)(int)(straightDis*10))/10+"meters southeastwardly";
					}else if(spot < desSpot){
						direction = "go straight "+((double)(int)(straightDis*10))/10+"meters northwestwardly";
					}else{
						direction = "keep going 1 meter.";
					}
				}else if(desArea == 3){
					straightDis = Distance(lon, lat, corner23lon, corner23lat); 
					if(straightDis <= 1){
						direction = "turn left, then go straight southwestwardly";
					}else{
						direction = "go straight "+ ((double)(int)(straightDis*10))/10 +"meters northwestwardly, then turn left";
					}
				}else if(desArea == 4){
					straightDis = Distance(lon, lat, corner14lon, corner14lat); 
					if(straightDis <= 1){
						direction = "go straight southwestwardly";
					}else{
						direction = "go straight "+ ((double)(int)(straightDis*10))/10 +"meters southeastwardly, then turn right";
					}
				}
			}
	
			if(startArea == 3){  
				if(desArea == 1){
					straightDis = Distance(lon, lat, corner23lon, corner23lat);
					direction = "go straight "+ ((double)(int)(straightDis*10))/10 +"meters northeastwardly, then turn right";
				}else if(desArea == 2){
					straightDis = Distance(lon, lat, corner23lon, corner23lat);
						direction = "go straight "+ ((double)(int)(straightDis*10))/10 +"meters northeastwardly, then turn right";
				}else if(desArea == 3){
					straightDis = Distance(lon, lat, nodes[desSpot][1], nodes[desSpot][0]);
					if(desSpot == spot && desSpot!=7){
						straightDis = getDistance(a[spot]);
					}
					if(straightDis <= 2){
						direction = "you arrived";
					}if(spot > desSpot){
						direction = "go straight "+((double)(int)(straightDis*10))/10+"meters northeastwardly";
					}else if(spot < desSpot){
						direction = "go straight "+((double)(int)(straightDis*10))/10+"meters southwestwardly";
					}else{
						direction = "keep going 1 meter.";
					}
				}else if(desArea == 4){
					straightDis = Distance(lon, lat, corner23lon, corner23lat);
					direction = "go straight "+ ((double)(int)(straightDis*10))/10 +"meters northeastwardly, then turn right";
				}
			}
			
			if(startArea == 4){ 
				if(desArea == 1){
					straightDis = Distance(lon, lat, corner14lon, corner14lat);
					direction = "go straight "+((double)(int)(straightDis*10))/10+ "meters northeastwardly, then turn right";
				}else if(desArea == 2){
					straightDis = Distance(lon, lat, corner14lon, corner14lat);
					direction = "go straight "+((double)(int)(straightDis*10))/10+"meters northeastwardly, then turn left";
				}else if(desArea == 3){
					straightDis = Distance(lon, lat, corner14lon, corner14lat);
					direction = "go straight "+((double)(int)(straightDis*10))/10+"meters northeastwardly, then turn left";
				}else if(desArea == 4){
					if(desSpot == spot && desSpot!=7){
						straightDis = getDistance(a[spot]);
					}
					straightDis = Distance( lon, lat, nodes[desSpot][1], nodes[desSpot][0]);
					if(straightDis <= 2 ){
						direction = "you arrived";
					}else if(spot > desSpot){
						direction = "go straight "+((double)(int)(straightDis*10))/10+"meters northeastwardly ";
					}else if(spot < desSpot){
						direction = "go straight "+((double)(int)(straightDis*10))/10+"meters southwestwardly ";
					}else{
						direction = "keep going 1 meter.";
					}
				}
			}
			Log.d("66666666", direction);
		}
		Thread thread = new Thread(null, calculationAnswer, "calculationAnswerThread");
		thread.start();	
	}

	public static double Distance(double long1, double lat1, double long2, double lat2) {  
	    double a, b, R;  
	    R = 6378137;
	    lat1 = lat1 * Math.PI / 180.0;  
	    lat2 = lat2 * Math.PI / 180.0;  
	    a = lat1 - lat2;  
	    b = (long1 - long2) * Math.PI / 180.0;  
	    double d;  
	    double sa2, sb2;  
	    sa2 = Math.sin(a / 2.0);  
	    sb2 = Math.sin(b / 2.0);  
	    d = 2 * R * Math.asin(Math.sqrt(sa2 * sa2 + Math.cos(lat1) * Math.cos(lat2) * sb2 * sb2));  
	    return d;  
	}

	public double getDistance(int RSSI){
		double distanceToTag = -0.00903 *RSSI*RSSI - 2.171*RSSI - 94;
		return distanceToTag;
	}
}
